#!/bin/bash

# Production Deployment Script Wrapper
# This script provides a simple interface to the Node.js deployment script

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    print_error "Node.js is not installed. Please install Node.js first."
    exit 1
fi

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    print_error "npm is not installed. Please install npm first."
    exit 1
fi

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Change to project root
cd "$PROJECT_ROOT"

print_header "üöÄ Production Deployment"

# Check if .env file exists
if [ ! -f ".env" ]; then
    print_warning ".env file not found"
    print_status "Copying production environment template..."
    
    if [ -f "deployment/production.env.example" ]; then
        cp deployment/production.env.example .env
        print_warning "Please edit .env file with your actual configuration before proceeding"
        print_status "Template copied to .env - edit it and run this script again"
        exit 1
    else
        print_error "Environment template not found at deployment/production.env.example"
        exit 1
    fi
fi

# Check if dependencies are installed
if [ ! -d "node_modules" ]; then
    print_status "Installing dependencies..."
    npm ci
fi

# Make the deployment script executable
chmod +x "$SCRIPT_DIR/deploy.js"

# Execute the Node.js deployment script with all arguments
print_status "Starting deployment process..."
node "$SCRIPT_DIR/deploy.js" "$@"

# Check exit code
if [ $? -eq 0 ]; then
    print_header "‚úÖ Deployment Successful"
    print_status "Your application is now running in production mode"
    print_status "Check the health endpoint: curl http://localhost:5000/health"
else
    print_header "‚ùå Deployment Failed"
    print_error "Please check the error messages above and fix any issues"
    exit 1
fi